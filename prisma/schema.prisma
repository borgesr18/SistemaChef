generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "auth"]
}


model Usuario {
  id                              String                            @id @default(cuid())
  nome                            String
  email                           String                            @unique
  senhaHash                       String
  role                            String                            @default("viewer")
  oculto                          Boolean                           @default(false)
  createdAt                       DateTime                          @default(now())
  updatedAt                       DateTime                          @updatedAt
  estoqueMovimentacoes            EstoqueMovimentacao[]
  estoqueProducaoMovimentacoes   EstoqueProducaoMovimentacao[]
  fichasTecnicas                  FichaTecnica[]
  producoes                       Producao[]
  categoriasInsumos               CategoriaInsumo[]

  @@map("usuarios")
}

model Categoria {
  id       String    @id @default(cuid())
  nome     String    @unique
  produtos Produto[]

  @@map("categorias")
}

model Unidade {
  id       String    @id
  nome     String
  produtos Produto[]

  @@map("unidades")
}

model Produto {
  id                   String                @id @default(cuid())
  nome                 String
  categoriaId          String?
  marca                String?
  unidadeId            String?
  preco                Float
  precoUnitario        Float?
  fornecedor           String?
  pesoEmbalagem        Float?
  infoNutricional      Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  estoqueMovimentacoes EstoqueMovimentacao[]
  ingredientesFicha    IngredienteFicha[]
  categoriaRef         Categoria?            @relation(fields: [categoriaId], references: [id])
  unidadeRef           Unidade?              @relation(fields: [unidadeId], references: [id])
  userId               String
  user                 Usuario               @relation(fields: [userId], references: [id])

  @@map("produtos")
}

model FichaTecnica {
  id                String                        @id @default(cuid())
  nome              String
  descricao         String?
  categoria         String
  modoPreparo       String?
  tempoPreparo      String?
  rendimentoTotal   Float?
  unidadeRendimento String?
  custoTotal        Float                         @default(0)
  custoPorcao       Float                         @default(0)
  observacoes       String?
  userId            String
  createdAt         DateTime                      @default(now())
  updatedAt         DateTime                      @updatedAt
  estoqueProducao   EstoqueProducaoMovimentacao[]
  user              Usuario                       @relation(fields: [userId], references: [id])
  ingredientes      IngredienteFicha[]
  producoes         Producao[]

  @@map("fichas_tecnicas")
}

model IngredienteFicha {
  id         String       @id @default(cuid())
  fichaId    String
  produtoId  String
  quantidade Float
  unidade    String
  custo      Float        @default(0)
  ficha      FichaTecnica @relation(fields: [fichaId], references: [id], onDelete: Cascade)
  produto    Produto      @relation(fields: [produtoId], references: [id])

  @@map("ingredientes_ficha")
}

model EstoqueMovimentacao {
  id         String   @id @default(cuid())
  produtoId  String
  quantidade Float
  preco      Float
  fornecedor String?
  marca      String?
  data       DateTime @default(now())
  tipo       String
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  produto    Produto  @relation(fields: [produtoId], references: [id])
  user       Usuario  @relation(fields: [userId], references: [id])

  @@map("estoque_movimentacoes")
}

model Producao {
  id                String       @id @default(cuid())
  fichaId           String
  quantidadeTotal   Float
  unidadeQuantidade String?
  pesoUnitario      Float?
  unidadePeso       String?
  unidadesGeradas   Int?
  custoTotal        Float
  custoUnitario     Float
  validade          String?
  data              DateTime     @default(now())
  userId            String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  ficha             FichaTecnica @relation(fields: [fichaId], references: [id])
  user              Usuario      @relation(fields: [userId], references: [id])

  @@map("producoes")
}

model EstoqueProducaoMovimentacao {
  id         String       @id @default(cuid())
  fichaId    String
  quantidade Float
  validade   String?
  data       DateTime     @default(now())
  tipo       String
  userId     String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  ficha      FichaTecnica @relation(fields: [fichaId], references: [id])
  user       Usuario      @relation(fields: [userId], references: [id])

  @@map("estoque_producao_movimentacoes")
}

model PrecoVenda {
  id            String   @id @default(cuid())
  producaoId    String
  fichaId       String
  custoUnitario Float
  lucro1        Float
  preco1        Float
  lucro2        Float
  preco2        Float
  lucro3        Float
  preco3        Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("precos_venda")
}

model CategoriaReceita {
  id        String   @id @default(cuid())
  nome      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categorias_receitas")
}

model CategoriaInsumo {
  id        String   @id @default(cuid())
  nome      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      Usuario  @relation(fields: [userId], references: [id])

  @@unique([nome, userId])
  @@map("categorias_insumos")
}
